"use strict";

Object.defineProperty(exports, "__esModule", {
    value: true
});
exports.applyChanges = applyChanges;
exports.applyAllChanges = applyAllChanges;

var _rxjs = require("rxjs");

var Range = require("atom").Range;
function applyChanges(editor, response) {
    if (!response) return;
    if (response.Changes) {
        (function () {
            var buffer = editor.getBuffer();
            var checkpoint = buffer.createCheckpoint();
            response.Changes.forEach(function (change) {
                var range = new Range([change.StartLine, change.StartColumn], [change.EndLine, change.EndColumn]);
                buffer.setTextInRange(range, change.NewText);
            });
            buffer.groupChangesSinceCheckpoint(checkpoint);
        })();
    } else if (response.Buffer) {
        editor.setText(response.Buffer);
    }
}
function resetPreviewTab() {
    var pane = atom.views.getView(atom.workspace.getActivePane());
    if (pane) {
        var title = pane.querySelector(".title.temp");
        if (title) {
            title.classList.remove("temp");
        }
        var tab = pane.querySelector(".preview-tab.active");
        if (tab) {
            tab.classList.remove("preview-tab");
            tab.isPreviewTab = false;
        }
    }
}
function applyAllChanges(changes) {
    resetPreviewTab();
    return _rxjs.Observable.from(changes).concatMap(function (change) {
        return atom.workspace.open(change.FileName, undefined).then(function (editor) {
            resetPreviewTab();
            applyChanges(editor, change);
        });
    }).subscribe();
}
//# sourceMappingURL=data:application/json;charset=utf8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImxpYi9zZXJ2aWNlcy9hcHBseS1jaGFuZ2VzLnRzIiwibGliL3NlcnZpY2VzL2FwcGx5LWNoYW5nZXMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7Ozs7UUFNQTtRQW9DQTs7QUN6Q0E7O0FEQ0EsSUFBTSxRQUFRLFFBQVEsTUFBUixFQUFnQixLQUFoQjtBQUlkLFNBQUEsWUFBQSxDQUE2QixNQUE3QixFQUFzRCxRQUF0RCxFQUFtSTtBQUMvSCxRQUFJLENBQUMsUUFBRCxFQUFXLE9BQWY7QUFDQSxRQUFJLFNBQVMsT0FBVCxFQUFrQjs7QUFDbEIsZ0JBQU0sU0FBUyxPQUFPLFNBQVAsRUFBVDtBQUNOLGdCQUFNLGFBQWEsT0FBTyxnQkFBUCxFQUFiO0FBRU4scUJBQVMsT0FBVCxDQUFpQixPQUFqQixDQUF5QixVQUFDLE1BQUQsRUFBTztBQUM1QixvQkFBTSxRQUFRLElBQUksS0FBSixDQUFVLENBQUMsT0FBTyxTQUFQLEVBQWtCLE9BQU8sV0FBUCxDQUE3QixFQUFrRCxDQUFDLE9BQU8sT0FBUCxFQUFnQixPQUFPLFNBQVAsQ0FBbkUsQ0FBUixDQURzQjtBQUU1Qix1QkFBTyxjQUFQLENBQXNCLEtBQXRCLEVBQTZCLE9BQU8sT0FBUCxDQUE3QixDQUY0QjthQUFQLENBQXpCO0FBS0EsbUJBQU8sMkJBQVAsQ0FBbUMsVUFBbkM7YUFUa0I7S0FBdEIsTUFVTyxJQUFJLFNBQVMsTUFBVCxFQUFpQjtBQUN4QixlQUFPLE9BQVAsQ0FBZSxTQUFTLE1BQVQsQ0FBZixDQUR3QjtLQUFyQjtDQVpYO0FBb0JBLFNBQUEsZUFBQSxHQUFBO0FBQ0ksUUFBTSxPQUF5QixLQUFLLEtBQUwsQ0FBVyxPQUFYLENBQW1CLEtBQUssU0FBTCxDQUFlLGFBQWYsRUFBbkIsQ0FBekIsQ0FEVjtBQUVJLFFBQUksSUFBSixFQUFVO0FBQ1YsWUFBTSxRQUFRLEtBQUssYUFBTCxDQUFtQixhQUFuQixDQUFSLENBREk7QUFFVixZQUFJLEtBQUosRUFBVztBQUNQLGtCQUFNLFNBQU4sQ0FBZ0IsTUFBaEIsQ0FBdUIsTUFBdkIsRUFETztTQUFYO0FBSUEsWUFBTSxNQUFNLEtBQUssYUFBTCxDQUFtQixxQkFBbkIsQ0FBTixDQU5JO0FBT1YsWUFBSSxHQUFKLEVBQVM7QUFDTCxnQkFBSSxTQUFKLENBQWMsTUFBZCxDQUFxQixhQUFyQixFQURLO0FBRUMsZ0JBQUssWUFBTCxHQUFvQixLQUFwQixDQUZEO1NBQVQ7S0FQQTtDQUZKO0FBZ0JBLFNBQUEsZUFBQSxDQUFnQyxPQUFoQyxFQUFzRTtBQUNsRSxzQkFEa0U7QUFFbEUsV0FBTyxpQkFBVyxJQUFYLENBQTZDLE9BQTdDLEVBQ0YsU0FERSxDQUNRO2VBQXlDLEtBQUssU0FBTCxDQUFlLElBQWYsQ0FBb0IsT0FBTyxRQUFQLEVBQWlCLFNBQXJDLEVBQy9DLElBRCtDLENBQzFDLGtCQUFNO0FBQ1IsOEJBRFE7QUFFUix5QkFBYSxNQUFiLEVBQXFCLE1BQXJCLEVBRlE7U0FBTjtLQURDLENBRFIsQ0FNRixTQU5FLEVBQVAsQ0FGa0U7Q0FBdEUiLCJmaWxlIjoibGliL3NlcnZpY2VzL2FwcGx5LWNoYW5nZXMuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQge01vZGVsc30gZnJvbSBcIm9tbmlzaGFycC1jbGllbnRcIjtcclxuLyogdHNsaW50OmRpc2FibGU6dmFyaWFibGUtbmFtZSAqL1xyXG5jb25zdCBSYW5nZSA9IHJlcXVpcmUoXCJhdG9tXCIpLlJhbmdlO1xyXG4vKiB0c2xpbnQ6ZW5hYmxlOnZhcmlhYmxlLW5hbWUgKi9cclxuaW1wb3J0IHtPYnNlcnZhYmxlfSBmcm9tIFwicnhqc1wiO1xyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5Q2hhbmdlcyhlZGl0b3I6IEF0b20uVGV4dEVkaXRvciwgcmVzcG9uc2U6IHsgQ2hhbmdlcz86IE1vZGVscy5MaW5lUG9zaXRpb25TcGFuVGV4dENoYW5nZVtdOyBCdWZmZXI/OiBzdHJpbmc7IH0pIHtcclxuICAgIGlmICghcmVzcG9uc2UpIHJldHVybjtcclxuICAgIGlmIChyZXNwb25zZS5DaGFuZ2VzKSB7XHJcbiAgICAgICAgY29uc3QgYnVmZmVyID0gZWRpdG9yLmdldEJ1ZmZlcigpO1xyXG4gICAgICAgIGNvbnN0IGNoZWNrcG9pbnQgPSBidWZmZXIuY3JlYXRlQ2hlY2twb2ludCgpO1xyXG5cclxuICAgICAgICByZXNwb25zZS5DaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xyXG4gICAgICAgICAgICBjb25zdCByYW5nZSA9IG5ldyBSYW5nZShbY2hhbmdlLlN0YXJ0TGluZSwgY2hhbmdlLlN0YXJ0Q29sdW1uXSwgW2NoYW5nZS5FbmRMaW5lLCBjaGFuZ2UuRW5kQ29sdW1uXSk7XHJcbiAgICAgICAgICAgIGJ1ZmZlci5zZXRUZXh0SW5SYW5nZShyYW5nZSwgY2hhbmdlLk5ld1RleHQpO1xyXG4gICAgICAgIH0pO1xyXG5cclxuICAgICAgICBidWZmZXIuZ3JvdXBDaGFuZ2VzU2luY2VDaGVja3BvaW50KGNoZWNrcG9pbnQpO1xyXG4gICAgfSBlbHNlIGlmIChyZXNwb25zZS5CdWZmZXIpIHtcclxuICAgICAgICBlZGl0b3Iuc2V0VGV4dChyZXNwb25zZS5CdWZmZXIpO1xyXG4gICAgfVxyXG59XHJcblxyXG4vLyBJZiB5b3UgaGF2ZSBwcmV2aWV3IHRhYnMgZW5hYmxlZCxcclxuLy8gICAgIHRoZXkgd2lsbCBhY3R1YWxseSB0cnkgdG8gY2xvc2VcclxuLy8gICAgIHdpdGggY2hhbmdlcyBzdGlsbC5cclxuZnVuY3Rpb24gcmVzZXRQcmV2aWV3VGFiKCkge1xyXG4gICAgY29uc3QgcGFuZTogSFRNTEVsZW1lbnQgPSA8YW55PmF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKCkpO1xyXG4gICAgaWYgKHBhbmUpIHtcclxuICAgIGNvbnN0IHRpdGxlID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnRpdGxlLnRlbXBcIik7XHJcbiAgICBpZiAodGl0bGUpIHtcclxuICAgICAgICB0aXRsZS5jbGFzc0xpc3QucmVtb3ZlKFwidGVtcFwiKTtcclxuICAgIH1cclxuXHJcbiAgICBjb25zdCB0YWIgPSBwYW5lLnF1ZXJ5U2VsZWN0b3IoXCIucHJldmlldy10YWIuYWN0aXZlXCIpO1xyXG4gICAgaWYgKHRhYikge1xyXG4gICAgICAgIHRhYi5jbGFzc0xpc3QucmVtb3ZlKFwicHJldmlldy10YWJcIik7XHJcbiAgICAgICAgKDxhbnk+dGFiKS5pc1ByZXZpZXdUYWIgPSBmYWxzZTtcclxuICAgIH1cclxuICAgIH1cclxufVxyXG5cclxuZXhwb3J0IGZ1bmN0aW9uIGFwcGx5QWxsQ2hhbmdlcyhjaGFuZ2VzOiBNb2RlbHMuTW9kaWZpZWRGaWxlUmVzcG9uc2VbXSkge1xyXG4gICAgcmVzZXRQcmV2aWV3VGFiKCk7XHJcbiAgICByZXR1cm4gT2JzZXJ2YWJsZS5mcm9tPE1vZGVscy5Nb2RpZmllZEZpbGVSZXNwb25zZT4oY2hhbmdlcylcclxuICAgICAgICAuY29uY2F0TWFwKGNoYW5nZSA9PiA8UHJvbWlzZTxBdG9tLlRleHRFZGl0b3I+Pjxhbnk+YXRvbS53b3Jrc3BhY2Uub3BlbihjaGFuZ2UuRmlsZU5hbWUsIHVuZGVmaW5lZClcclxuICAgICAgICAgICAgLnRoZW4oZWRpdG9yID0+IHtcclxuICAgICAgICAgICAgICAgIHJlc2V0UHJldmlld1RhYigpO1xyXG4gICAgICAgICAgICAgICAgYXBwbHlDaGFuZ2VzKGVkaXRvciwgY2hhbmdlKTtcclxuICAgICAgICAgICAgfSkpXHJcbiAgICAgICAgLnN1YnNjcmliZSgpO1xyXG59XHJcbiIsImNvbnN0IFJhbmdlID0gcmVxdWlyZShcImF0b21cIikuUmFuZ2U7XG5pbXBvcnQgeyBPYnNlcnZhYmxlIH0gZnJvbSBcInJ4anNcIjtcbmV4cG9ydCBmdW5jdGlvbiBhcHBseUNoYW5nZXMoZWRpdG9yLCByZXNwb25zZSkge1xuICAgIGlmICghcmVzcG9uc2UpXG4gICAgICAgIHJldHVybjtcbiAgICBpZiAocmVzcG9uc2UuQ2hhbmdlcykge1xuICAgICAgICBjb25zdCBidWZmZXIgPSBlZGl0b3IuZ2V0QnVmZmVyKCk7XG4gICAgICAgIGNvbnN0IGNoZWNrcG9pbnQgPSBidWZmZXIuY3JlYXRlQ2hlY2twb2ludCgpO1xuICAgICAgICByZXNwb25zZS5DaGFuZ2VzLmZvckVhY2goKGNoYW5nZSkgPT4ge1xuICAgICAgICAgICAgY29uc3QgcmFuZ2UgPSBuZXcgUmFuZ2UoW2NoYW5nZS5TdGFydExpbmUsIGNoYW5nZS5TdGFydENvbHVtbl0sIFtjaGFuZ2UuRW5kTGluZSwgY2hhbmdlLkVuZENvbHVtbl0pO1xuICAgICAgICAgICAgYnVmZmVyLnNldFRleHRJblJhbmdlKHJhbmdlLCBjaGFuZ2UuTmV3VGV4dCk7XG4gICAgICAgIH0pO1xuICAgICAgICBidWZmZXIuZ3JvdXBDaGFuZ2VzU2luY2VDaGVja3BvaW50KGNoZWNrcG9pbnQpO1xuICAgIH1cbiAgICBlbHNlIGlmIChyZXNwb25zZS5CdWZmZXIpIHtcbiAgICAgICAgZWRpdG9yLnNldFRleHQocmVzcG9uc2UuQnVmZmVyKTtcbiAgICB9XG59XG5mdW5jdGlvbiByZXNldFByZXZpZXdUYWIoKSB7XG4gICAgY29uc3QgcGFuZSA9IGF0b20udmlld3MuZ2V0VmlldyhhdG9tLndvcmtzcGFjZS5nZXRBY3RpdmVQYW5lKCkpO1xuICAgIGlmIChwYW5lKSB7XG4gICAgICAgIGNvbnN0IHRpdGxlID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnRpdGxlLnRlbXBcIik7XG4gICAgICAgIGlmICh0aXRsZSkge1xuICAgICAgICAgICAgdGl0bGUuY2xhc3NMaXN0LnJlbW92ZShcInRlbXBcIik7XG4gICAgICAgIH1cbiAgICAgICAgY29uc3QgdGFiID0gcGFuZS5xdWVyeVNlbGVjdG9yKFwiLnByZXZpZXctdGFiLmFjdGl2ZVwiKTtcbiAgICAgICAgaWYgKHRhYikge1xuICAgICAgICAgICAgdGFiLmNsYXNzTGlzdC5yZW1vdmUoXCJwcmV2aWV3LXRhYlwiKTtcbiAgICAgICAgICAgIHRhYi5pc1ByZXZpZXdUYWIgPSBmYWxzZTtcbiAgICAgICAgfVxuICAgIH1cbn1cbmV4cG9ydCBmdW5jdGlvbiBhcHBseUFsbENoYW5nZXMoY2hhbmdlcykge1xuICAgIHJlc2V0UHJldmlld1RhYigpO1xuICAgIHJldHVybiBPYnNlcnZhYmxlLmZyb20oY2hhbmdlcylcbiAgICAgICAgLmNvbmNhdE1hcChjaGFuZ2UgPT4gYXRvbS53b3Jrc3BhY2Uub3BlbihjaGFuZ2UuRmlsZU5hbWUsIHVuZGVmaW5lZClcbiAgICAgICAgLnRoZW4oZWRpdG9yID0+IHtcbiAgICAgICAgcmVzZXRQcmV2aWV3VGFiKCk7XG4gICAgICAgIGFwcGx5Q2hhbmdlcyhlZGl0b3IsIGNoYW5nZSk7XG4gICAgfSkpXG4gICAgICAgIC5zdWJzY3JpYmUoKTtcbn1cbiJdfQ==
